// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@zilliqa-js/core
//   ../../@zilliqa-js/contract
//   ../../@zilliqa-js/zilliqa

declare module 'zilliqa-laya-sdk' {
    export * from 'zilliqa-laya-sdk/zilliqaLaya';
    export * from 'zilliqa-laya-sdk/errors';
    export * from 'zilliqa-laya-sdk/types';
}

declare module 'zilliqa-laya-sdk/zilliqaLaya' {
    import { Provider } from '@zilliqa-js/core';
    import { Contract, State } from '@zilliqa-js/contract';
    import { Zilliqa } from '@zilliqa-js/zilliqa';
    import { IAddressWithMnemonic, IZilliqaBalanceResult, ZilliqaNet } from 'zilliqa-laya-sdk/types';
    /**
        * ZilliqaLaya
        *
        * Main class to communicate with zilliqa network on Laya platform.
        *
        */
    export class ZilliqaLaya {
            /**
                * netUrl
                *
                * Zilliqa node url
                *
                */
            readonly netUrl: string;
            /**
                * zilliqaClient
                *
                * Native zilliqa client that provides more features.
                *
                */
            readonly zilliqaClient: Zilliqa;
            /**
                * constructor
                *
                * Instantiates a ZilliqaLaya instance with providing node url and provider
                *
                * @param {string | ZilliqaNet} Zilliqa network
                * @param {Provider} Zilliqa provider
                *
                */
            constructor(node: string | ZilliqaNet, provider?: Provider);
            /**
                * createAccount
                *
                * Creates new account and returns address with corresponding mnemonic
                *
                * @returns {IAddressWithMnemonic} Address and mnemonic
                */
            createAccount(): IAddressWithMnemonic;
            /**
                * importAccountFromPrivateKey
                *
                * Imports existing private key to add account and returns address
                *
                * @param {string} Private key
                *
                * @returns {string} Address
                */
            importAccountFromPrivateKey(privateKey: string): string;
            /**
                * importAccountFromMnemonic
                *
                * Imports mnemonic words to add account and returns address
                *
                * @param {string} mnemonic words
                *
                * @returns {string} Address
                */
            importAccountFromMnemonic(words: string): string;
            /**
                * getAllAddresses
                *
                * Get all addresses of imported or created accounts
                *
                * @returns {string[]} Array of address
                */
            getAllAddresses(): string[];
            /**
                * getMinimumGasPrice
                *
                * Get minimum gas price of current network
                *
                * @returns {string} Gas price
                */
            getMinimumGasPrice(): Promise<string>;
            /**
                * getNetworkId
                *
                * Get ID of current network
                *
                * @returns {string} Network ID
                */
            getNetworkId(): Promise<string>;
            /**
                * getBalance
                *
                * Get balance of given address
                *
                * @param {string} Address
                *
                * @returns {IZilliqaBalanceResult} Balance and nonce
                */
            getBalance(address: string): Promise<IZilliqaBalanceResult>;
            /**
                * sendToken
                *
                * Sends zilliqa token from one address to another address
                *
                * @param {string} From address
                * @param {string} To address
                * @param {string} Token amount
                * @param {string} Gas price, if not provided using minimum
                * @param {number} Gas limit
                *
                * @returns {any} Zilliqa transaction if no exception happened
                */
            sendToken(fromAddr: string, toAddr: string, amount: string, gasPrice?: string, gasLimit?: number): Promise<any>;
            /**
                * deployContract
                *
                * Deploys a contract on zilliqa network
                *
                * @param {string} From address
                * @param {string} Contract code
                * @param {string} Gas price, if not provided using minimum
                * @param {number} Gas limit
                *
                * @returns {any} Zilliqa transaction and contract if no exception happened
                */
            deployContract(fromAddr: string, code: string, gasPrice?: string, gasLimit?: number): Promise<any>;
            /**
                * callContract
                *
                * Call a contract on zilliqa network
                *
                * @param {string} From address
                * @param {contract} Contract
                * @param {string} Transition
                * @param {any}    Parameters
                * @param {string} Token amount
                * @param {string} Gas price, if not provided using minimum
                * @param {number} Gas limit
                *
                * @returns {any} Zilliqa transaction if no exception happened
                */
            callContract(fromAddr: string, contract: Contract, transition: string, args: any, amount: string, gasPrice?: string, gasLimit?: number): Promise<any>;
            /**
                * callContractAtAddress
                *
                * Call a contract on zilliqa network
                *
                * @param {string} From address
                * @param {string} Contract address
                * @param {string} Transition
                * @param {any}    Parameters
                * @param {string} Token amount
                * @param {string} Gas price, if not provided using minimum
                * @param {number} Gas limit
                *
                * @returns {any} Zilliqa transaction
                */
            callContractAtAddress(fromAddr: string, contractAddr: string, transition: string, args: any, amount: string, gasPrice?: string, gasLimit?: number): Promise<any>;
            /**
                * getContractStateAtAddress
                *
                * Gets contract state within given address
                *
                * @param {string} Contract address
                *
                * @returns {State} Contract state
                */
            getContractStateAtAddress(contractAddr: string): Promise<State>;
    }
}

declare module 'zilliqa-laya-sdk/errors' {
    /**
        * Error code
        *
        * Error code enums
        *
        */
    export const enum ErrorCode {
            ILLEGAL_PRIVATE_KEY = "ILLEGAL_PRIVATE_KEY",
            UNABLE_TO_SAVE_ACCOUNT = "UNABLE_TO_SAVE_ACCOUNT",
            ILLEGAL_PASSWORD = "ILLEGAL_PASSWORD"
    }
    /**
        * ZilLayaError
        *
        * Custom error for use with Zilliqa Laya Sdk.
        *
        * @extends {Error}
        */
    export class ZilLayaError extends Error {
            code: ErrorCode;
            constructor(message: string, code: ErrorCode);
    }
}

declare module 'zilliqa-laya-sdk/types' {
    /**
        * Zilliqa Network
        *
        * Zilliqa Network enums
        *
        */
    export enum ZilliqaNet {
            MAIN = 0,
            TEST = 1
    }
    /**
        * Zilliqa address and mnemonic words
        *
        */
    export interface IAddressWithMnemonic {
            address: string;
            mnemonic: string;
    }
    /**
        * Balance and current nonce for a zilliqa address
        *
        */
    export interface IZilliqaBalanceResult {
            balance: string;
            nonce: string;
    }
}

